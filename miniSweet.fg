#===============================
#
# Preparation
# -----------
#
#===============================
{short () `
	const svg = document.getElementById('gameZone')
	svg.setAttribute('width', innerWidth)
	svg.setAttribute('height', innerHeight)
`}

{deffunc drawNewSweet (p_id p_w p_h)
	:displayNewSVGElementIn (+ '<rect id="' $p_id '" width="' $p_w '" height="' $p_h '" rx="15" x="0" y="0" />') 'svg'
}

{deffunc lifeOfSweet (p_sName p_color p_x p_y p_width p_height)
	# birth
	#==========
	.var thisSweet <-- %drawNewSweet $p_sName $p_width $p_height
	{short (thisSweet p_color p_x p_y) `
		thisSweet.style.fill = p_color
		thisSweet.setAttribute('x', p_x)
		thisSweet.setAttribute('y', p_y)
		thisSweet.dx = 2
		thisSweet.dy = -2
	`}
	
	# rest of life
	#=============
	.var stopMove
	.var restartMove
	{par
		%continuous send thisSweet `
			send('oneSweet', thisSweet)
		`
		%continuous adapt thisSweet `
			function collision(pos1, size1, pos2, size2) {
				return -size2 <= (pos2-pos1) && (pos2-pos1) <= size1
			}
			// Bouncing
			//---------
			if (v(thisSweet.x) + v(thisSweet.width) > innerWidth) thisSweet.dx = - Math.abs(thisSweet.dx)
			if (v(thisSweet.x) < 0) thisSweet.dx = Math.abs(thisSweet.dx)
			if (v(thisSweet.y) + v(thisSweet.height) > innerHeight) thisSweet.dy = - Math.abs(thisSweet.dy)
			if (v(thisSweet.y) < 0) thisSweet.dy = Math.abs(thisSweet.dy)
			
			// Meeting
			//--------
			for (const other of events.get('oneSweet')) {
				if (thisSweet != other
						&& collision(v(thisSweet.x), v(thisSweet.width), v(other.x), v(other.width))
						&& collision(v(thisSweet.y), v(thisSweet.height), v(other.y), v(other.height))   ) {
					thisSweet.style.fill = '#cccccc'
				}
			}
		`
		{while true
			%doOnce
				%continuous play thisSweet `
					thisSweet.setAttribute('x', v(thisSweet.x) + thisSweet.dx*delta/30)
					thisSweet.setAttribute('y', v(thisSweet.y) + thisSweet.dy*delta/30)
				`
			until stopMove
			:await restartMove beep
		}
		{while true
			.awaitClickBeep (+ '#' $p_sName)
			.bip stopMove
			.awaitClickBeep (+ '#' $p_sName)
			.bip restartMove
		}
	}
}

#===============================
#
# Main program
# ------------
#
#===============================
.var innerWidth <-- .import innerWidth
.var innerHeight <-- .import innerHeight

{par
	(lifeOfSweet 'sweet1' '#ff0000' 10 10 100 100)
	(lifeOfSweet 'sweet2' '#00ff00' [$innerWidth / 3] [$innerHeight / 3] 100 100)
	(lifeOfSweet 'sweet3' '#0000ff' [[$innerWidth * 3] / 4] [[$innerHeight * 1] / 4] 100 100)
	(lifeOfSweet 'sweet4' '#ffff00' [[$innerWidth * 3] / 4] [[$innerHeight * 3] / 4] 100 100)
}
